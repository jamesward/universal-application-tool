AWSTemplateFormatVersion: '2010-09-09'
Description: 'The "virtual private cloud" (VPC) for the UAT.  One region, to save costs, but two Availability Zones (AZs) for reliability.  We will go down if us-west-2 goes down, but not if only one building goes down.  Built with parallel stacks - two public and two private subnets, one per AZ.'
Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
  ig:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  pubsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.192.10.0/24
      VpcId: !Ref 'vpc'
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
  pubsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.192.11.0/24
      VpcId: !Ref 'vpc'
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: true
  privsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.192.20.0/24
      VpcId: !Ref 'vpc'
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: false
  privsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.192.21.0/24
      VpcId: !Ref 'vpc'
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: false
  attachgateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'vpc'
      InternetGatewayId: !Ref 'ig'
  natgateway1ip:
    Type: AWS::EC2::EIP
    DependsOn:
      - attachgateway
    Properties:
      Domain: !Ref 'vpc'
  natgateway2ip:
    Type: AWS::EC2::EIP
    DependsOn:
      - attachgateway
    Properties:
      Domain: !Ref 'vpc'
  natgateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'natgateway1ip.AllocationId'
      SubnetId: !Ref 'pubsubnet1'
  natgateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'natgateway2ip.AllocationId'
      SubnetId: !Ref 'pubsubnet2'
  routetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'vpc'
  internetroute:
    Type: AWS::EC2::Route
    DependsOn:
      - attachgateway
    Properties:
      GatewayId: !Ref 'ig'
      RouteTableId: !Ref 'routetable'
      DestinationCidrBlock: '0.0.0.0/0'
  pubsubnet1igassn:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'pubsubnet1'
      RouteTableId: !Ref 'routetable'
  pubsubnet2igassn:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'pubsubnet2'
      RouteTableId: !Ref 'routetable'
  privroutetable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'vpc'
  privroutetable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'vpc'
  natroute1:
    Type: AWS::EC2::Route
    DependsOn:
      - attachgateway
    Properties:
      RouteTableId: !Ref 'privroutetable1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'natgateway1'
  natroute2:
    Type: AWS::EC2::Route
    DependsOn:
      - attachgateway
    Properties:
      RouteTableId: !Ref 'privroutetable2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'natgateway2'
  privsubnet1rtassn:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'privsubnet1'
      RouteTableId: !Ref 'privroutetable1'
  privsubnet2rtassn:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'privsubnet2'
      RouteTableId: !Ref 'privroutetable2'
Outputs:
  VPCId:
    Description: The VPC Id
    Value: !Ref 'vpc'
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PublicSubnet1:
    Description: The first public subnet of the vpc
    Value: !Ref 'pubsubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'
  PublicSubnet2:
    Description: The second public subnet of the vpc
    Value: !Ref 'pubsubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'
  PrivateSubnet1:
    Description: The first private subnet of the vpc
    Value: !Ref 'privsubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'
  PrivateSubnet2:
    Description: The second private subnet of the vpc
    Value: !Ref 'privsubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'
